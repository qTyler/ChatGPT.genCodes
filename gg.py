import asyncio, random, datetime
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import ChatTypeFilter, AdminFilter
from aiogram.types import ParseMode
from aiogram.utils import exceptions


class Recruiting:
    def __init__(self, chat_id, max_users=25, timeout=0, description=""):
        self.chat_id = chat_id
        self.max_users = max_users
        self.outtype = 0
        self.maxlen_name = 21
        self.timeout = timeout
        self.rtime = datetime.now()
        self.description = description
        self.users = []
        self.status = "recruiting_started"
        self.msg_id = None
        self.keyboard = None     
        self.smiles = [ 'ü™Ç', 'üèãÔ∏è‚Äç‚ôÄÔ∏è', 'ü§º‚Äç‚ôÄÔ∏è', 'ü§∏‚Äç‚ôÄÔ∏è', '‚õπÔ∏è‚Äç‚ôÄÔ∏è', 'ü§∫', 'ü§æ‚Äç‚ôÄÔ∏è', 'üèåüèª‚Äç‚ôÄÔ∏è', 'üèá', 'üèÑüèª‚Äç‚ôÄÔ∏è', 'üèä‚Äç‚ôÄÔ∏è', 'ü§Ω‚Äç‚ôÄÔ∏è', 'üö£‚Äç‚ôÇÔ∏è', 'üßó‚Äç‚ôÄÔ∏è', 'üöµ‚Äç‚ôÄÔ∏è', 'üö¥‚Äç‚ôÄÔ∏è', '‚õ∑', 'üèÇ']
        
        # –°—Ç–∞—Ç—É—Å—ã
        self.pattern_msg_status = {
           "recruiting_started": "üé™ –ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞–ª—Å—è! ",
           "recruiting_limit_reached": "üöß –ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ | –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ (—Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ—Ç).",
           "recruiting_timeout": "üöß –ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ | –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ (–≤—Ä–µ–º—è –≤—ã—à–ª–æ)."
        }

        # –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
        self.msg_recruiting = "<b>{pattern_msg_status}</b>\n"
        if self.max_users > 0:
            self.msg_recruiting += "   ‚óà –ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {max_users}\n"
        else:
            self.msg_recruiting += "   ‚óà –ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n"
        if self.timeout > 0:
            self.msg_recruiting += "   ‚óà –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {timeout} –º–∏–Ω.\n"
        else:
            self.msg_recruiting += "   ‚óà –í—Ä–µ–º—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n"
        if self.description:
            self.msg_recruiting += "\nüìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n   ‚Äî {description}\n"

        self.msg_recruiting += "\nüåí <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n{userslist}\n\n"
        
    async def create_joinbtn(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        randEmojNamebtn = random.choice(self.smiles) + " –£—á–∞—Å—Ç–≤—É—é!"
        self.keyboard = types.InlineKeyboardMarkup(row_width=1)
        self.keyboard.add(
            types.InlineKeyboardButton(
                text=randEmojNamebtn, callback_data="join"
            )
        )

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    async def create_recruiting_message(self, bot):
        await self.create_joinbtn()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = await bot.send_message(self.chat_id, self.msg_recruiting.format(
            pattern_msg_status=self.pattern_msg_status[self.status],
            max_users=self.max_users,
            timeout=self.timeout,
            description=self.description,
            userslist=self.get_users_list()
        ), reply_markup=self.keyboard, parse_mode=ParseMode.HTML)

        self.msg_id = msg.message_id

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    async def update_recruiting_message(self, bot):
        try:
            if self.timeout > 0:
               now = self.rtime
               end_time = now + timedelta(minutes=self.timeout)
               time = datetime(1, 1, 1) + (end_time - now)
               time = time.strftime('%M:%S')
               print(time)
            else:
               time = 0
            await self.create_joinbtn()   
            await bot.edit_message_text(
                self.msg_recruiting.format(
                    pattern_msg_status=self.pattern_msg_status[self.status],
                    max_users=self.max_users,
                    timeout=time,
                    description=self.description,
                    userslist=self.get_users_list()
                ),
                chat_id=self.chat_id,
                message_id=self.msg_id,
                reply_markup=self.keyboard,
                parse_mode=ParseMode.HTML
            )
        except exceptions.MessageNotModified:
            pass

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    def get_users_list(self):
        if self.outtype == 0:
           return "\n".join([f"   {i}. {user}" for i, user in enumerate(self.users, start=1)])
        else:
           return "\n".join([f"  ‚óã {user}" for user in enumerate(self.users)])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤—É—é!"
    async def process_join(self, bot, callback_query: types.CallbackQuery):
        user = callback_query.from_user
        if user.last_name:
            full_name = f"{user.first_name} {user.last_name}"
        else:
            full_name = user.first_name
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if full_name not in self.users:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            self.users.append(full_name[:self.maxlen_name])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.update_recruiting_message(bot)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if len(self.users) == self.max_users:
                self.status = "recruiting_limit_reached"
                self.keyboard = None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            elif self.timeout != 0 and len(self.users) > 0 and len(self.users) < self.max_users:
                await asyncio.sleep(self.timeout * 60)
                if len(self.users) < self.max_users:
                    self.status = "recruiting_timeout"
                    self.keyboard = None

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.update_recruiting_message(bot)

        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏
        try:
            await bot.answer_callback_query(callback_query.id)
        except exceptions.InvalidQueryID:
            pass


class RecruitingManager:
    def __init__(self):
        self.recruitings = {}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gg
    async def cmd_gg(self, bot, message: types.Message):
        chat_id = message.chat.id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = message.get_args().split()
        max_users = int(params[0]) if len(params) > 0 else 25
        timeout = int(params[1]) if len(params) > 1 else 0
        description = " ".join(params[2:]) if len(params) > 2 else ""

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Recruiting
        recruiting = Recruiting(chat_id, max_users, timeout, description)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await recruiting.create_recruiting_message(bot)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Recruiting –≤ —Å–ª–æ–≤–∞—Ä–µ
        self.recruitings[chat_id] = recruiting

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤—É—é!"
    async def process_join(self, bot, callback_query: types.CallbackQuery):
        chat_id = callback_query.message.chat.id

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Recruiting –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        recruiting = self.recruitings.get(chat_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ Recruiting
        if recruiting is None:
            raise ValueError("Recruiting not found")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤—É—é!"
        await recruiting.process_join(bot, callback_query)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(token="6059387846:AAFyWIuLjvzieK1sjiRRfB2v47e1UUwNJUo")
    dp = Dispatcher(bot)
    recruiting_manager = RecruitingManager()
    allowed_users = [
        6112710364, 
        5343681896, 
        274918556
    ]
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gg
    @dp.message_handler(commands=["gg"])
    async def cmd_gg(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        print(message.chat.type)
        if message.chat.type != 'supergroup':
            await message.answer("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /gg —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
        chat_member = await bot.get_chat_member(chat_id, user_id)
        if not chat_member.is_chat_admin() and not user_id in allowed_users:
            await message.answer("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /gg –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.")
            return
        await recruiting_manager.cmd_gg(bot, message)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤—É—é!"
    @dp.callback_query_handler(lambda c: c.data == "join")
    async def process_join(callback_query: types.CallbackQuery):
        await recruiting_manager.process_join(bot, callback_query)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling()


if __name__ == "__main__":
    asyncio.run(main())
